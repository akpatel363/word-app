{"version":3,"sources":["utils/axios.js","store/actions.js","components/NavBar.jsx","components/Word.jsx","components/WordInfo.jsx","components/WordDetailDialog.jsx","components/AddWord.jsx","components/WordContainer.jsx","App.js","store/reducer.js","store/configureStore.js","index.js"],"names":["instance","axios","create","baseURL","process","SET_SEARCH","FETCHING_STARTED","FETCHING_ERROR","FETCH_WORDS","POSTING_WORD","ADD_WORD","POSTING_ERROR","handleError","err","response","data","error","setSearch","search","type","payload","fetchWords","dispatch","a","get","res","NavBar","props","useDispatch","useState","active","setActive","AppBar","position","elevation","Toolbar","Input","fullWidth","disableUnderline","placeholder","style","color","onChange","e","target","value","toLowerCase","endAdornment","IconButton","onClick","Icon","variant","marginLeft","Word","word","onSelect","ListItem","button","flexDirection","alignItems","ListItemText","primary","primaryTypographyProps","results","map","r","secondaryTypographyProps","secondary","category","entries","senses","definitions","_id","Divider","component","memo","Mute","children","rest","Sense","sense","examples","ex","text","WordInfo","margin","origin","s","subsenses","ss","WordDetailDialog","onClose","Dialog","fullScreen","open","DialogContent","AddWord","setOpen","setText","useSelector","posting","postingError","Fab","bottom","right","DialogTitle","TextField","label","helperText","DialogActions","Button","disabled","cb","post","CircularProgress","size","useStyles","makeStyles","theme","spinner","display","justifyContent","spacing","fontSize","palette","main","marginBottom","fab","stickyText","top","left","backgroundColor","zIndex","padding","WordContainer","classes","useEffect","className","words","loading","List","filter","w","includes","innerContainer","overflow","overflowY","background","height","borderRadius","border","breakpoints","down","minHeight","App","initialState","reducer","state","concat","composeEnhancers","compose","configureStore","createStore","applyMiddleware","thunk","createMuiTheme","typography","fontFamily","store","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.84fab2be.chunk.js","sourcesContent":["import axios from \"axios\";\n\n//Creating a custome axios instance with baseurl\nconst instance = axios.create({ baseURL: process.env.REACT_APP_BASE_URL });\n\nexport default instance;\n","import axios from \"../utils/axios\";\n\n//Different Actions to modify Redux State\nexport const SET_SEARCH = \"SET_SEARCH\";\nexport const FETCHING_STARTED = \"FETCHING_STARTED\";\nexport const FETCHING_ERROR = \"FETCHING_ERROR\";\nexport const FETCH_WORDS = \"FETCH_WORDS\";\nexport const POSTING_WORD = \"POSTING_WORD\";\nexport const ADD_WORD = \"ADD_WORD\";\nexport const POSTING_ERROR = \"POSTING_ERROR\";\n\nconst handleError = (err) => {\n  if (!err.response) {\n    return \"Error connecting to server.\";\n  }\n  return err.response?.data?.error || \"Unknown error occurred.\";\n};\n\nexport const setSearch = (search) => ({ type: SET_SEARCH, payload: search });\n\n//Fetch words from the backend\nexport const fetchWords = () => async (dispatch) => {\n  dispatch({ type: FETCHING_STARTED });\n  try {\n    const res = await axios.get(\"api/words\");\n    dispatch({ type: FETCH_WORDS, payload: res.data });\n  } catch (err) {\n    dispatch({ type: FETCHING_ERROR, payload: handleError(err) });\n  }\n};\n\n//Add new word\nexport const addWord = (word, cb) => async (dispatch) => {\n  dispatch({ type: POSTING_WORD });\n  try {\n    const res = await axios.post(\"/api/words\", { word });\n    dispatch({ type: ADD_WORD, payload: res.data });\n    cb();\n  } catch (err) {\n    dispatch({ type: POSTING_ERROR, payload: handleError(err) });\n  }\n};\n","import {\n  AppBar,\n  Icon,\n  IconButton,\n  Input,\n  Toolbar,\n  Typography as Text,\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setSearch } from \"../store/actions\";\n\nconst NavBar = (props) => {\n  const dispatch = useDispatch();\n  const [active, setActive] = useState(false); //State to check whether in searching mode or not.\n\n  return (\n    <AppBar position=\"relative\" elevation={0}>\n      <Toolbar>\n        {/* If in searching mode than showing an input. */}\n        {active ? (\n          <Input\n            fullWidth\n            disableUnderline\n            placeholder=\"Search...\"\n            style={{ color: \"white\" }}\n            onChange={(e) => dispatch(setSearch(e.target.value.toLowerCase()))}\n            endAdornment={\n              <IconButton\n                style={{ color: \"white\" }}\n                onClick={() => {\n                  //Reseting the state and search string when closed.\n                  setActive(false);\n                  dispatch(setSearch(\"\"));\n                }}\n              >\n                <Icon>close</Icon>\n              </IconButton>\n            }\n          />\n        ) : (\n          <>\n            {/* Else showing the title and the search button. */}\n            <Text variant=\"h6\">Vocab</Text>\n            <IconButton\n              onClick={() => setActive(true)}\n              style={{ marginLeft: \"auto\", color: \"white\" }}\n            >\n              <Icon>search</Icon>\n            </IconButton>\n          </>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default NavBar;\n","import { Divider, ListItem, ListItemText } from \"@material-ui/core\";\nimport { memo } from \"react\";\n\nconst Word = ({ word, onSelect }) => (\n  <>\n    <ListItem\n      button\n      key={word._id}\n      onClick={() => onSelect(word)}\n      style={{ flexDirection: \"column\", alignItems: \"flex-start\" }}\n    >\n      <ListItemText\n        primary={word.word}\n        primaryTypographyProps={{ variant: \"h6\" }}\n      />\n      {word.results?.map((r) => ( //Rendering different Lexical Entries with their types and meanings\n        <ListItemText\n          key={r._id}\n          secondaryTypographyProps={{ variant: \"body2\", color: \"textPrimary\" }}\n          secondary={`(${r.category}) ${r.entries[0].senses[0].definitions[0]}`}\n        />\n      ))}\n    </ListItem>\n    <Divider component=\"li\" />\n  </>\n);\n\nexport default memo(Word); //Memoizing the Component to optimize rendering\n","import { Divider, Typography as Text } from \"@material-ui/core\";\nimport { Fragment } from \"react\";\nimport { memo } from \"react\";\n\nconst Mute = ({ children, ...rest }) => (\n  <Text color=\"textSecondary\" {...rest}>\n    {children}\n  </Text>\n);\n\n//A reusable componenet for rendering senses with their examples\nconst Sense = ({ sense }) => (\n  <>\n    <Text>{sense.definitions[0]}</Text>\n    <ul>\n      {sense.examples.map((ex) => (\n        //Rendering examples as a list\n        <Text key={ex._id} component=\"li\">\n          {ex?.text}\n        </Text>\n      ))}\n    </ul>\n  </>\n);\n\nconst WordInfo = ({ word }) =>\n  word.results.map((r) => (\n    //Going through different Lexical entries.\n    <div style={{ margin: \"8px 0\" }} key={r._id}>\n      <Mute>{r.category}</Mute>\n      {/* Going through sub entries. */}\n      {r.entries.map((e) => (\n        <Fragment key={e._id}>\n          {e.origin[0] && <Mute>Origin : {e.origin[0]}</Mute>}\n          {/* Going through senses */}\n          {e.senses.map((s) => (\n            <Fragment key={s._id}>\n              <Sense sense={s} />\n              {/* Going through subsenses */}\n              {s.subsenses.map((ss) => (\n                <Sense key={ss._id} sense={ss} />\n              ))}\n            </Fragment>\n          ))}\n        </Fragment>\n      ))}\n      <Divider />\n    </div>\n  ));\n\nexport default memo(WordInfo);\n","import {\n  Dialog,\n  DialogContent,\n  Divider,\n  Icon,\n  IconButton,\n  Typography as Text,\n} from \"@material-ui/core\";\nimport { memo } from \"react\";\nimport WordInfo from \"./WordInfo\";\n\nconst WordDetailDialog = ({ word, onClose }) => (\n  //Showing the dialog if word is not null and setting the word null on close.\n  <Dialog fullScreen open={!!word} onClose={() => onClose(null)}>\n    <IconButton\n      onClick={() => onClose(null)}\n      style={{ margin: \"8px 8px 0 auto\" }}\n    >\n      <Icon>close</Icon>\n    </IconButton>\n    <Text style={{ margin: \"0 24px\" }} variant=\"h3\">\n      {word?.word}\n    </Text>\n    <Divider />\n    <DialogContent>{word && <WordInfo word={word} />}</DialogContent>\n  </Dialog>\n);\n\nexport default memo(WordDetailDialog);\n","import {\n  Button,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Fab,\n  Icon,\n  TextField,\n} from \"@material-ui/core\";\n\nimport { memo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addWord } from \"../store/actions\";\n\nconst AddWord = (props) => {\n  const [open, setOpen] = useState(false); //State for dialog\n  const [text, setText] = useState(\"\"); //State for the input text\n  const dispatch = useDispatch();\n  const { posting, postingError } = useSelector((s) => s);\n\n  return (\n    <>\n      <Fab\n        color=\"primary\"\n        onClick={() => setOpen(true)}\n        style={{ position: \"fixed\", bottom: \"20px\", right: \"20px\" }}\n      >\n        <Icon>add</Icon>\n      </Fab>\n      <Dialog fullWidth open={open} onClose={() => setOpen(false)}>\n        <DialogTitle>Add Word</DialogTitle>\n        <DialogContent>\n          <TextField\n            fullWidth\n            value={text}\n            label=\"New Word\"\n            error={!!postingError}\n            helperText={postingError}\n            onChange={(e) => setText(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={() => setOpen(false)}>\n            Cancel\n          </Button>\n          <Button\n            color=\"primary\"\n            disabled={!text || posting}\n            onClick={() =>\n              dispatch(\n                addWord(text, () => {\n                  setOpen(false);\n                  setText(\"\");\n                })\n              )\n            }\n          >\n            {/* Showing a spinner if word is being posted. */}\n            {posting ? <CircularProgress size={24} /> : \"Add\"}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default memo(AddWord); //Memoizing the component to optimize rendering.\n","import { useEffect, useState } from \"react\";\nimport {\n  Button,\n  CircularProgress,\n  Divider,\n  Icon,\n  List,\n  makeStyles,\n  Typography as Text,\n} from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchWords } from \"../store/actions\";\nimport Word from \"./Word\";\nimport WordDetailDialog from \"./WordDetailDialog\";\nimport AddWord from \"./AddWord\";\n\n//Custom styles\nconst useStyles = makeStyles((theme) => ({\n  spinner: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: theme.spacing(2, 0),\n  },\n  error: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    margin: theme.spacing(3, 0),\n    \"& .MuiIcon-root\": {\n      fontSize: \"4em\",\n      color: theme.palette.error.main,\n    },\n    \"& .MuiTypography-root\": {\n      marginBottom: theme.spacing(1),\n    },\n  },\n  fab: {\n    position: \"fixed\",\n    bottom: \"20px\",\n    right: \"20px\",\n  },\n  stickyText: {\n    top: \"0\",\n    left: \"0\",\n    position: \"sticky\",\n    backgroundColor: \"white\",\n    zIndex: 100,\n    \"& .MuiTypography-root\": {\n      padding: theme.spacing(2, 2, 1),\n    },\n  },\n}));\n\nconst WordContainer = (props) => {\n  const classes = useStyles();\n  const [active, setActive] = useState(null);\n  const dispatch = useDispatch();\n  const data = useSelector((s) => s);\n\n  useEffect(() => {\n    //Fetching the words when the component is initially rendered.\n    dispatch(fetchWords());\n  }, [dispatch]);\n\n  if (data.error)\n    // Show error if any error occurs while fetching words.\n    return (\n      <div className={classes.error}>\n        <Icon>error</Icon>\n        <Text variant=\"h5\">{data.error || \"Something went wrong.\"}</Text>\n        <Button\n          color=\"secondary\"\n          variant=\"outlined\"\n          onClick={() => dispatch(fetchWords())}\n        >\n          Retry\n        </Button>\n      </div>\n    );\n\n  if (!data.words || data.loading)\n    //Show spinner while waiting for words from the backend.\n    return (\n      <div className={classes.spinner}>\n        <CircularProgress />\n      </div>\n    );\n\n  return (\n    <>\n      <div className={classes.stickyText}>\n        <Text>Words</Text>\n        <Divider />\n      </div>\n      <List style={{ padding: 0 }}>\n        {data.words\n          ?.filter((w) => w?.word.includes(data.search)) //filtering the results based on the input query.\n          ?.map((w) => (\n            <Word key={w._id} word={w} onSelect={setActive} />\n          ))}\n      </List>\n      {/* Showing details of a particular word if it's active. */}\n      <WordDetailDialog word={active} onClose={setActive} />\n      <AddWord />\n    </>\n  );\n};\n\nexport default WordContainer;\n","import { makeStyles } from \"@material-ui/core\";\nimport NavBar from \"./components/NavBar\";\nimport WordContainer from \"./components/WordContainer\";\n\nconst useStyles = makeStyles((theme) => ({\n  innerContainer: {\n    overflow: \"hidden\",\n    overflowY: \"scroll\",\n    background: \"white\",\n    height: \"calc(100vh - 64px)\",\n    borderRadius: \"20px 20px 0 0\",\n    border: \"1spx solid transparent\",\n    [theme.breakpoints.down(\"sm\")]: {\n      minHeight: \"calc(100vh - 56px)\",\n    },\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <>\n      <NavBar />\n      <div className={classes.innerContainer}>\n        <WordContainer />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import {\n  ADD_WORD,\n  FETCHING_ERROR,\n  FETCHING_STARTED,\n  FETCH_WORDS,\n  POSTING_ERROR,\n  POSTING_WORD,\n  SET_SEARCH,\n} from \"./actions\";\n\n//Initial State for Redux Store\nconst initialState = {\n  posting: false,\n  postingError: null,\n  loading: false,\n  error: null,\n  search: \"\",\n  words: null,\n};\n\nconst reducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case SET_SEARCH:\n      //Setting the search string\n      return { ...state, search: payload };\n    case FETCHING_STARTED:\n      //Started Fetching the words\n      return { ...state, loading: true, error: null };\n    case FETCH_WORDS:\n      //Words Fetched\n      return { ...state, loading: false, words: payload };\n    case FETCHING_ERROR:\n      //Error while fetching words\n      return { ...state, loading: false, error: payload };\n    case POSTING_WORD:\n      //Posting a new word\n      return { ...state, posting: true, postingError: null };\n    case ADD_WORD:\n      //Word added\n      return { ...state, posting: false, words: [payload].concat(state.words) };\n    case POSTING_ERROR:\n      //Error while posting the word\n      return { ...state, posting: false, postingError: payload };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import thunk from \"redux-thunk\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport reducer from \"./reducer\";\n\n//Configuration to use Redux DevTools while development\nconst composeEnhancers =\n  process.env.NODE_ENV === \"development\"\n    ? (typeof window !== \"undefined\" &&\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n      compose\n    : compose;\n\nconst configureStore = () => {\n  const store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n  return store;\n};\n\nexport default configureStore;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store/configureStore\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\n\n//Creating a new theme.\nconst theme = createMuiTheme({\n  typography: { fontFamily: \"Kumbh Sans\" },\n  palette: {\n    primary: {\n      main: \"#5d1049\",\n    },\n  },\n});\n\n//Creating the store.\nconst store = configureStore();\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}